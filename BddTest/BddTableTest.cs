// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using BddSharp.Kernel;
using System.Collections;
namespace BddTest
{
    /// <summary>
    ///This is a test class for BddSharp.Kernel.BddTable and is intended
    ///to contain all BddSharp.Kernel.BddTable Unit Tests
    ///</summary>
    [TestClass()]
    public class BddTableTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Add (int, BddNode)
        ///</summary>
        [TestMethod()]
        public void AddTestAndItemTest()
        {
            BddTable target = new BddTable();

            int u = 567;
            int high = 3;
            int low = 4;
            int var = 5;

            target.Add(u, low, high, var);
            BddNode actual = target[u];
            Assert.AreEqual(actual.high, high, "Adding nodes is not correct");
            Assert.AreEqual(actual.low, low, "Adding nodes is not correct");
            Assert.AreEqual(actual.var, var, "Adding nodes is not correct");

        }

        /// <summary>
        ///A test for BddTable ()
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            BddTable target = new BddTable();


            Assert.IsNotNull(target);
        }

        /// <summary>
        ///A test for BddTable (int)
        ///</summary>
        [TestMethod()]
        public void ConstructorTest1()
        {
            int startSize = 500;

            BddTable target = new BddTable(startSize);
            bool result = target.StartSize > startSize;

            Assert.AreEqual(true, result);
        }

        /// <summary>
        ///A test for Clear ()
        ///</summary>
        [TestMethod()]
        public void ClearTest()
        {
            BddTable target = new BddTable();
            target.Add(657, 6, 6, 6);
            target.Clear();
            Assert.AreEqual(0, target.Count);
        }

        /// <summary>
        ///A test for ContainsKey (int)
        ///</summary>
        [TestMethod()]
        public void ContainsKeyTest()
        {
            BddTable target = new BddTable();
            int u = 3275;
            target.Add(u, 5, 6, 8);

            bool expected = true;
            bool actual;

            actual = target.ContainsKey(u);

            Assert.AreEqual(expected, actual, "BddSharp.Kernel.BddTable.ContainsKey did not return the expected value.");
        }

        /// <summary>
        ///A test for Count
        ///</summary>
        [TestMethod()]
        public void CountTest()
        {
            BddTable target = new BddTable();

            int val = 0;

            Assert.AreEqual(val, target.Count, "BddSharp.Kernel.BddTable.Count was not set correctly.");
            target.Add(5634, 5, 6, 8);
            val = 1;
            Assert.AreEqual(val, target.Count, "BddSharp.Kernel.BddTable.Count was not set correctly.");
        }

        /// <summary>
        ///A test for FillDegree ()
        ///</summary>
        [TestMethod()]
        public void FillDegreeTest()
        {
            BddTable target = new BddTable(2);

            int expected = 0;
            int actual;

            actual = target.FillDegree();

            Assert.AreEqual(expected, actual, "BddSharp.Kernel.BddTable.FillDegree did not return the expected value.");

            target.Add(6, 78, 45, 33);

            bool result = target.FillDegree() > 0;
            Assert.AreEqual(true, result, "BddSharp.Kernel.BddTable.FillDegree did not return the expected value.");
            
        }

        /// <summary>
        ///A test for GetEnumerator ()
        ///</summary>
        [TestMethod()]
        public void GetEnumeratorTest()
        {
            BddTable target = new BddTable();

            IEnumerator actual;

            actual = target.GetEnumerator();

            Assert.IsNotNull(actual);
        }

        

        /// <summary>
        ///A test for NeedResize ()
        ///</summary>
        [TestMethod()]
        public void NeedResizeTest()
        {
            BddTable target = new BddTable(2);

            bool expected = false;
            bool actual;

            actual = target.NeedResize();

            Assert.AreEqual(expected, actual, "BddSharp.Kernel.BddTable.NeedResize did not return the expected value.");
            

        }

        ////<summary>
        ////A test for Ref (int)
        ////</summary>
        //[TestMethod()]
        //public void RefTest()
        //{
        //    BddTable target = new BddTable();

        //    int u = 0; // TODO: Initialize to an appropriate value

        //    target.Ref(u);
            
        //    Assert.Inconclusive("A method that does not return a value cannot be verified.");
        //}

        /// <summary>
        ///A test for Remove (int)
        ///</summary>
        [TestMethod()]
        public void RemoveTest()
        {
            BddTable target = new BddTable(2);
            
            int u = 0; // TODO: Initialize to an appropriate value
            target.Add(u, 5, 6, 7);
            target.Remove(u);
            int result = target.Count;
            Assert.AreEqual(0, result);
        }

        /// <summary>
        ///A test for Size
        ///</summary>
        [TestMethod()]
        public void SizeTest()
        {
            BddTable target = new BddTable();

            int val = 131072;


            Assert.AreEqual(val, target.Size, "BddSharp.Kernel.BddTable.Size was not set correctly.");
            
            target = new BddTable(5);
            val = 8;
            Assert.AreEqual(val, target.Size, "BddSharp.Kernel.BddTable.Size was not set correctly.");
            
        }

        /// <summary>
        ///A test for StartSize
        /// Tested in creation (Thomas)
        ///</summary>
        //[TestMethod()]
        //public void StartSizeTest()
        //{
        //    BddTable target = new BddTable();

        //    int val = 0; // TODO: Assign to an appropriate value for the property


        //    Assert.AreEqual(val, target.StartSize, "BddSharp.Kernel.BddTable.StartSize was not set correctly.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}


        /// <summary>
        ///A test for this[int u]
        ///</summary>
        [TestMethod()]
        public void ItemTest()
        {
            BddTable target = new BddTable();

            BddNode val = new BddNode(); // TODO: Assign to an appropriate value for the property

            int u = 0; // TODO: Initialize to an appropriate value

            //target[u] = val;


            Assert.AreEqual(val, target[u], "BddSharp.Kernel.BddTable.this was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for UnRef (int)
        ///</summary>
        //[TestMethod()]
        //public void UnRefTest()
        //{
        //    BddTable target = new BddTable();

        //    int u = 0; // TODO: Initialize to an appropriate value

        //    target.UnRef(u);

        //    Assert.Inconclusive("A method that does not return a value cannot be verified.");
        //}
        /// <summary>
        ///A test for GetMark ()
        ///</summary>
        [TestMethod()]
        public void GetMarkTest()
        {
            int var = 3;

            int low = 3;

            int high = 3;

            int u = 3;

            TEntry target = new TEntry(var, low, high, u);

            bool expected = false;
            bool actual;

            actual = target.GetMark();

            Assert.AreEqual(expected, actual, "BddSharp.Kernel.TEntry.GetMark did not return the expected value.");
        }

        /// <summary>
        ///A test for GetVar ()
        ///</summary>
        [TestMethod()]
        public void GetVarTest()
        {
            int var = 42;

            int low = 4;

            int high = 5;

            int u = 5;

            TEntry target = new TEntry(var, low, high, u);

            int expected = 42;
            int actual;

            actual = target.GetVar();

            Assert.AreEqual(expected, actual, "BddSharp.Kernel.TEntry.GetVar did not return the expected value.");
        }

        /// <summary>
        ///A test for SetMark (bool)
        ///</summary>
        [TestMethod()]
        public void SetMarkTest()
        {
            int var = 2;

            int low = 2;

            int high = 2;

            int u = 2;

            TEntry target = new TEntry(var, low, high, u);

            bool mark = true;

            target.SetMark(mark);
            bool actual = target.GetMark();
            bool expected = true;

            Assert.AreEqual(expected, actual, "BddSharp.Kernel.TEntry.GetMark did not return the expected value.");
        }

    }


}
