// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using BddSharp.Kernel;
namespace BddTest
{
    /// <summary>
    ///This is a test class for BddSharp.Kernel.BDDHash and is intended
    ///to contain all BddSharp.Kernel.BDDHash Unit Tests
    ///</summary>
    [TestClass()]
    public class BDDHashTest
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        [TestInitialize()]
        public void MyTestInitialize()
        {
            Kernel.Setup();
        }
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Add (int, int, int, int)
        ///</summary>
        [TestMethod()]
        public void AddTest()
        {
            BDDHash target = new BDDHash();

            int var = 1;
            int low = 0;
            int high = 1;
            int u = 42;

            int beforeCount = target.Count;

            target.Add(var, low, high, u);

            int afterCount = target.Count;

            Assert.AreEqual(beforeCount + 1, afterCount, "Count was not increased on Add");
        }

        /// <summary>
        ///A test for BDDHash ()
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            BDDHash target = new BDDHash();

            Assert.IsNotNull(target, "Object created");
        }

        /// <summary>
        ///A test for BDDHash (int)
        ///</summary>
        [TestMethod()]
        public void ConstructorTest1()
        {
            int s = 0x100; // TODO: Initialize to an appropriate value

            BDDHash target = new BDDHash(s);
            BddSharp_Kernel_BDDHashAccessor accessor = new BddSharp_Kernel_BDDHashAccessor(target);

            // TODO: Implement code to verify target
            Assert.IsNotNull(target, "Object created");
            Assert.AreEqual(s, accessor.startSize, "StartSize not initiated  to correct value.");
        }

        /// <summary>
        ///A test for Clear ()
        ///</summary>
        [TestMethod()]
        public void ClearTest()
        {
            BDDHash target = new BDDHash();
//            BddSharp_Kernel_BDDHashAccessor accessor = new BddSharp_Kernel_BDDHashAccessor(target);

            target.Add(1, 2, 3, 4);

            target.Clear();

            Assert.AreEqual(target.Count, 0, "Count was not reset on clear");
        }

        /// <summary>
        ///A test for ContainsKey (int, int, int)
        ///</summary>
        [TestMethod()]
        public void ContainsKeyTest()
        {
            BDDHash target = new BDDHash();

            int var = 1;
            int low = 2;
            int high = 3;

            bool expected = false;
            bool actual;

            actual = target.ContainsKey(var, low, high);

            Assert.AreEqual(expected, actual, "BddSharp.Kernel.BDDHash.ContainsKey returned the expected value.");
        }

        /// <summary>
        ///A test for NeedResize ()
        ///</summary>
        [TestMethod()]
        public void NeedResizeTest()
        {
            BDDHash target = new BDDHash();

            bool expected = false;
            bool actual;

            actual = target.NeedResize();

            Assert.AreEqual(expected, actual, "BddSharp.Kernel.BDDHash.NeedResize did not return the expected value.");
        }

        /// <summary>
        ///A test for Remove (int, int, int)
        ///</summary>
        [TestMethod()]
        public void RemoveTest()
        {
            BDDHash target = new BDDHash();

            int var = 4;
            int low = 5;
            int high = 6;

            int count_one = target.Count;

            target.Add(var, low, high, 42);

            int count_two = target.Count;

            target.Remove(var, low, high);

            int count_three = target.Count;

            Assert.AreEqual(count_one + 1, count_two, "Something was not insterted correct");
            Assert.AreEqual(count_two, count_three + 1, "Something was not removed correct");
        }

        /// <summary>
        ///A test for this[int var, int low, int high]
        ///</summary>
        [TestMethod()]
        public void ItemTest()
        {
            BDDHash target = new BDDHash();

            int val = 4;
            int var = 5;
            int low = 6;
            int high = 42;

            target.Add(var, low, high, val);

            Assert.AreEqual(val, target[var, low, high], "BddSharp.Kernel.BDDHash.this was not set correctly.");
        }
    }
}
