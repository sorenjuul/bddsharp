// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using BddSharp.Kernel;
namespace BddTest
{
    /// <summary>
    ///This is a test class for BddSharp.Kernel.BddGCache and is intended
    ///to contain all BddSharp.Kernel.BddGCache Unit Tests
    ///</summary>
    [TestClass()]
    public class BddGCacheTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Add (int, int, int, int)
        ///</summary>
        [TestMethod()]
        public void AddTest()
        {
            BddGCache target = new BddGCache();

            int u1 = 4;
            int u2 = 5;
            Op op = Op.DIS;
            int u = 0;

            target.Add(u1, u2, op, u);

            BddSharp_Kernel_BddGCacheAccessor accessor = new BddSharp_Kernel_BddGCacheAccessor(target);
            BddGCacheEntry[] temp = accessor.cacheArray;
            bool result = false;
            foreach (BddGCacheEntry en in temp)
            {
                if (en.op == op && en.u1 == u1 && en.u2 == u2)
                {
                    result = true;
                    break;
                }
            }
            Assert.AreEqual(true, result);
        }

        /// <summary>
        ///A test for BddGCache ()
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            BddGCache target = new BddGCache();

            Assert.IsNotNull(target);
        }

        /// <summary>
        ///A test for Clear ()
        ///</summary>
        [TestMethod()]
        public void ClearTest()
        {
            BddGCache target = new BddGCache();
            BddSharp_Kernel_BddGCacheAccessor ass = new BddSharp_Kernel_BddGCacheAccessor(target);
            BddGCacheEntry[] temp = ass.cacheArray;
            
            target.Clear();
            BddGCacheEntry[] temp2 = ass.cacheArray;
            Assert.AreNotSame(temp, temp2);
        }

        /// <summary>
        ///A test for ContainsKey (int, int, int)
        ///</summary>
        [TestMethod()]
        public void ContainsKeyTest()
        {
            BddGCache target = new BddGCache();

            int u1 = 45;

            int u2 = 876;

            Op op = Op.INV_IMPL;
            int u = 647;
            target.Add(u1, u2, op, u);
            bool expected = true;
            bool actual;

            actual = target.ContainsKey(u1, u2, op);

            Assert.AreEqual(expected, actual, "BddSharp.Kernel.BddGCache.ContainsKey did not return the expected value.");
            Assert.IsFalse(target.ContainsKey(2, 4, Op.NAND));
        }

        /// <summary>
        ///A test for this[int u1, int u2, int op]
        ///</summary>
        [TestMethod()]
        public void ItemTest()
        {
            BddGCache target = new BddGCache();

            int u1 = 45;

            int u2 = 876;

            Op op = Op.INV_IMPL;
            int u = 647;
            target.Add(u1, u2, op, u);


            Assert.AreEqual(u, target[u1, u2, op], "BddSharp.Kernel.BddGCache.this was not set correctly.");
        }
    }
}
